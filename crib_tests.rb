require 'rspec'
require File.expand_path('../crib_hand.rb', __FILE__)

# Nice job on the specs. Definitely bonus points for that
RSpec.describe CribHand do
  # Generally in specs we also wrap our expectations by method
  # so in this case we would wrap all of these specs with a
  # describe #points do ...
  #
  # This also gives you the subject of all of your tests. You should always
  # define a subject clause to be explicit about the thing you are testing
  # subject(:points) { described_class.new(hand).points } in this case

  context "When testing total points generated by instances of CribHand" do
    it "points should equal 29" do
      # fun fact, inside an rspec spec, You get access to a `described_class`
      # method, which returns the class you are describing
      hand = CribHand.new([[5, 'h'], [5, 's'], [5, 'c'], [5, 'd'], [11, 'h']])
      points = hand.points
      expect(points).to eq 29
    end
    it "points should equal 4" do
      # Rspec has a special syntax for helping you set up infrastructure for tests
      # generally we would pull this into a let statement  at the top
      # of the context where it is relevant
      #
      # let(:hand) { ... } Then in your spec you have access to a hand method
      # which evaluates the block you passed to the let statement
      #
      # There is also let! which you can look up to see how it is different from
      # let
      hand = CribHand.new([[13, 'h'], [2, 's'], [4, 's'], [5, 'd'], [12, 's']])
      points = hand.points

      # Magic numbers are to be avoided, even in tests. This could be a let
      # statement as well.
      #
      # let(:expected_points) { 4 }
      expect(points).to eq 4
    end
    it "points should equal 15" do
      hand = CribHand.new([[2, 'h'], [2, 's'], [2, 'c'], [3, 'd'], [4, 's']])
      points = hand.points
      expect(points).to eq 15
    end
    it "points should equal 16" do
      hand = CribHand.new([[2, 'h'], [3, 's'], [3, 'c'], [4, 'd'], [4, 's']])
      points = hand.points
      expect(points).to eq 16
    end
    it "points should equal 24" do
      hand = CribHand.new([[4, 'h'], [4, 's'], [5, 'c'], [5, 'd'], [6, 's']])
      points = hand.points
      expect(points).to eq 24
    end
    it "points should equal 8" do
      hand = CribHand.new([[2, 'h'], [2, 's'], [2, 'c'], [3, 'd'], [3, 's']])
      points = hand.points
      expect(points).to eq 8
    end
    it "points should equal 14" do
      hand = CribHand.new([[3, 'h'], [3, 's'], [4, 'c'], [5, 'd'], [6, 's']])
      points = hand.points
      expect(points).to eq 14
    end
  end
end
